load("C:\\R\\Data Analysis\\Assignment2\\.RData")
load(samsungData.rda)
load("samsungData.rda")
ls()
summary(samsungData)
table(summary(samsungData))
summary(samsungData$activity)
head(samsungData$activity)
table(samsungData$activity)
table(samsungData$subject)
train = samsungData[samsungData$subject %in% c(1,3,5,6),]
train(samsungData$subject)
table(train$subject)
test = samsungData[samsungData$subject %in% c(27,28,29,30),]
table(test$subject)
validate = samsungData[samsungData$subject %in% c(22,23,25,26),]
table(validate$subject)
largeTrain = samsungData[samsungData$subject %in% c(7,8,11,14,15,16,17,19),]
table(is.na(samsungData))
dim(samsungData)
save.image("C:\\R\\Data Analysis\\Assignment2\\wkspace")
svd1 = svd(scale(samsungData[samsungData$subject==1,-c(562,563)]))
numericActivity <- as.numeric(as.factor(samsungData$activity))[samsungData$subject==1]
plot(svd1$u[,1],col=numericActivity,pch=19)
dev.copy2pdf("svd u1.pdf")
?dev.copy2pdf
dev.copy2pdf(file="svd u1.pdf")
plot(svd1$u[,10],col=numericActivity,pch=19)
plot(svd1$u[,11],col=numericActivity,pch=19)
plot(svd1$u[,12],col=numericActivity,pch=19)
plot(svd1$u[,13],col=numericActivity,pch=19)
plot(svd1$u[,21],col=numericActivity,pch=19)
plot(svd1$u[,521],col=numericActivity,pch=19)
plot(svd1$u[,51],col=numericActivity,pch=19)
plot(svd1$u[,11],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u11.pdf")
plot(svd1$u[,21],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u21.pdf")
plot(svd1$u[,2],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u2.pdf")
plot(svd1$u[,3],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u3.pdf")
plot(svd1$u[,4],col=numericActivity,pch=19)
plot(svd1$u[,5],col=numericActivity,pch=19)
plot(svd1$u[,6],col=numericActivity,pch=19)
plot(svd1$u[,4],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u4.pdf")
plot(svd1$u[,5],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u5.pdf")
plot(svd1$u[,6],col=numericActivity,pch=19)
dev.copy2pdf(file="svd u6.pdf")
plot(svd1$u[,500],col=numericActivity,pch=19)
plot(svd1$u[,340],col=numericActivity,pch=19)
plot(svd1$u[,341],col=numericActivity,pch=19)
plot(svd1$u[,342],col=numericActivity,pch=19)
plot(svd1$v[,1],pch=19)
dev.copy2pdf(file="svd v1.pdf")
plot(svd1$v[,2],pch=19)
dev.copy2pdf(file="svd v2.pdf")
plot(svd1$v[,3],pch=19)
dev.copy2pdf(file="svd v3.pdf")
plot(svd1$v[,4],pch=19)
dev.copy2pdf(file="svd v4.pdf")
plot(svd1$v[,5],pch=19)
dev.copy2pdf(file="svd v5.pdf")
plot(svd1$v[,6],pch=19)
dev.copy2pdf(file="svd v6.pdf")
plot(svd1$v[,21],pch=19)
dev.copy2pdf(file="svd v21.pdf")
table(svd1$u)
dim(svd1$u)
dim(svd1$v)
?order
maxConttriV1 <- order(svd1$v[,1], decreasing=true)
maxConttriV1 <- order(svd1$v[,1], decreasing=TRUE)
maxContriV1 <- order(svd1$v[,1], decreasing=TRUE)
head(maxContriV1)
head(svd1$v[,1])
samsungData[1, 281]
svd1$v[,1][281]
svd1$v[,1][439]
svd1$v[,1][360]
maxContriV2 <- order(svd1$v[,2], decreasing=TRUE)
maxContriV3 <- order(svd1$v[,3], decreasing=TRUE)
maxContriV4 <- order(svd1$v[,4], decreasing=TRUE)
maxContriV5 <- order(svd1$v[,5], decreasing=TRUE)
maxContriV6 <- order(svd1$v[,6], decreasing=TRUE)
maxContriV21 <- order(svd1$v[,21], decreasing=TRUE)
save.image("C:\\R\\Data Analysis\\Assignment2\\wkspace")
history(50)
history(100)
svd2 = svd(scale(testing[testing$subject==3,-c(562,563)]))
ls()
svd2 = svd(scale(train[train$subject==3,-c(562,563)]))
maxContri2V1 <- order(svd2$v[,1], decreasing=TRUE)
maxContri2V2 <- order(svd2$v[,2], decreasing=TRUE)
maxContri2V3 <- order(svd2$v[,3], decreasing=TRUE)
maxContri2V4 <- order(svd2$v[,4], decreasing=TRUE)
maxContri2V5 <- order(svd2$v[,5], decreasing=TRUE)
maxContri2V6 <- order(svd2$v[,6], decreasing=TRUE)
head(maxContriv1)
head(maxContriV1)
head(maxContri2V1)
head(maxContriV2)
head(maxContri2V2)
head(maxContriV3)
head(maxContri2V3)
maxContriV1 %in% maxContri2V2
head(maxContriV1) %in% (maxContri2V2)
head(maxContriV1) == (maxContri2V2)
head(maxContriV1) = (maxContri2V2)
head(maxContriV1) %in% head(maxContri2V2)
head(maxContriV1) %in% head(maxContri2V1)
?head
head(maxContriV1, 20) %in% head(maxContri2V1, 20)
head(maxContriV1, 50) %in% head(maxContri2V1, 50)
head(maxContriV1, 100) %in% head(maxContri2V1, 100)
head(maxContriV2, 100) %in% head(maxContri2V2, 100)
head(maxContriV3, 100) %in% head(maxContri2V3, 100)
head(maxContriV4, 100) %in% head(maxContri2V4, 100)
head(maxContriV5, 100) %in% head(maxContri2V5, 100)
table(head(maxContriV6, 100) %in% head(maxContri2V6, 100))
table(head(maxContriV1, 100) %in% head(maxContriV2, 100) %in% head(maxContriV3, 100))
table(head(maxContriV1, 100) %in% head(maxContriV2, 100))
which(head(maxContriV5, 100) %in% head(maxContri2V5, 100))
which(head(maxContriV4, 100) %in% head(maxContri2V4, 100))
library (tree)
sappy(train[,c(72,96)], names)
sapply(train[,c(72,96)], names)
treeSVD = tree(train$activity ~ train[,72] + train[,96])
treeRandom = tree(train$activity ~ train[,54] + train[,82] + train[,23] + train[,8] + train[,30])
treeRandom = tree(activity ~ ., data=train)
summary(treeRandom)
treeRandom = tree(train$activity ~ train[,54] + train[,82] + train[,23] + train[,8] + train[,30])
treeAll = tree(activity ~ ., data=train)
summary(treeRandom)
summary(treeSVD)
plot(treeSVD)
plot(treeRandom)
?tree
head(train[,54])
table(is.na(train[,54]))
table(is.na(train))
summary(train[,54])
ls()
treeSVD
treeRandom
summary(treeSVD)
sappy(train[,c(72,96)], names)
sapply(train[,c(72,96)], names)
treeSVD = tree(activity ~ tGravityAcc-arCoeff()-Y,3 + tBodyAccJerk-sma())
treeSVD = tree(activity ~ tGravityAcc-arCoeff()-Y,3 + tBodyAccJerk-sma(), data = train)
names(train[1,54])
sapply(train[1,c(72,96)], names)
names(train[1,72])
treeSVD = tree(activity ~ "tGravityAcc-arCoeff()-Y,3" + "tBodyAccJerk-sma()", data = train)
treeSVD = tree(train$activity ~ train[,72] + train[,96])
library(randomForest)
library(randomForests)
train[1,562]
testNoSub = test[,-562]
dim(testNoSub)
treeSVDNoSub = tree(testNoSub$activity ~ train[,72] + train[,96])
treeSVDNoSub = tree(testNoSub$activity ~ testNoSub[,72] + testNoSub[,96])
treeSVDNoSub
treeSVDNoSub = tree(activity ~ ., data=testNoSub )
head(names(testNoSub))
treeSVDNoSub = tree(activity ~ tBodyAcc-mean()-X, data=testNoSub )
?tree
treeSVDNoSub = tree(activity ~ tBodyAcc-mean()-X, testNoSub)
var1 = "tBodyAcc-mean()-X"
treeSVDNoSub = tree(activity ~ var1, testNoSub)
trainNoSub = testNoSub
c(1:10)
par(trainNoSub)
summary(trainNoSub)
names(trainNoSub) <- c(1:562)
head(names(testNoSub))
head(names(trainNoSub))
treeSVDNoSub = tree(562 ~ 1, trainNoSub)
treeSVDNoSub = tree(562 ~ 1, data=trainNoSub)
treeSVDNoSub = tree(as.character(562) ~ as.character(1), data=trainNoSub)
treeSVDNoSub
plot(treeSVDNoSub)
treeSVDNoSub = tree(as.character(562) ~ as.character(1) + as.character(2), data=trainNoSub)
plot(treeSVDNoSub)
treeSVDNoSub = tree(as.character(562) ~ as.character(1) + as.character(2) + as.character(72), data=trainNoSub)
plot(treeSVDNoSub)
summary(treeSVDNoSub)
treeSVDNoSub = tree(as.character(562) ~ ., data=trainNoSub)
library(simpleboot)
install.package("simpleboot")
install.packages("simpleboot")
library(simpleboot)
?prune.tree
lmSVDNoSub = lm(as.character(10) ~ as.character(1) + as.character(2) + as.character(72), data=trainNoSub)
summary(lmSVDNoSub)
head(trainNoSub[,1])
head(trainNoSub[1,])
treeSVDNoSub = tree(as.character(10) ~ as.character(1) + as.character(2) + as.character(72), data=trainNoSub)
treeSVDNoSub
plot(treeSVDNoSub)
ls()
head(names(train))
train <- data.frame(train)
head(names(train))
test <- data.frame(test)
validate <- data.frame(validate)
treeAllVar = tree(as.factor(train$activity) ~ ., data=train)
summary(treeAllVar)
treeSVD = tree(as.factor(train$activity) ~ train[,72] + train[,96], data=train)
treeSVD = tree(as.factor(train$activity) ~ train[, 54] + train[, 82] + train[, 23] + train[, 8] + train[, 30], data=train)
treeSVD = tree(as.factor(train$activity) ~ train[,72] + train[,96], data=train)
treeRandom = tree(as.factor(train$activity) ~ train[, 54] + train[, 82] + train[, 23] + train[, 8] + train[, 30], data=train)
summary(treeAllVar)
summary(treeSVN)
summary(treeSVD)
summary(treeRandom)
plot(treeSVN)
plot(treeAll)
plot(treeAllVar)
text(treeAllVar)
treeSVD
cvTreeAllVar = cv.tree(treeAllVar)
cvTreeAllVarDevErr = cv.tree(treeAllVar)
cvTreeAllVarMCErr = cv.tree(treeAllVar, method="misclass")
plot(cvTreeAllVarDevErr)
plot(cvTreeAllVarMCErr)
plot(cvTreeAllVarDevErr)
plot(cvTreeAllVarMCErr)
summary(cvTreeAllVarDevErr)
cvTreeAllVarDevErr
install.packages(randomForests)
install.packages("randomForests")
install.packages("randomForest")
rForestTreeAllVar = randomForest(as.factor(train$activity) ~ ., data=train)
rForestTreeAllVar = randomForests(as.factor(train$activity) ~ ., data=train)
library(randomForests)
library(randomForest)
rForestTreeAllVar = randomForest(as.factor(train$activity) ~ ., data=train)
save.image("C:\\R\\Data Analysis\\Assignment2\\wkspace")
dim(samsungData)
ls()
?predict
plot(rForestTreeAllVar)
plot(TreeAllVar)
plot(treeAllVar)
history(200)
plot(treeAllVar)
library(tree)
plot(treeAllVar)
text(treeAllVar)
?text
text(treeAllVar, cex=0.5)
plot(treeAllVar)
text(treeAllVar, cex=0.5)
plot(rForestTreeAllVar)
library(random forest)
library(random forests)
library(randomForests)
library(randomForest)
plot(rForestTreeAllVar)
predict(treeAllVar, newData=test)
predictTreeAllVar = predict(treeAllVar, newData=test)
predictRForestTreeAllVar = predict(rForestTreeAllVar, newData=test)
summary(predictTreeAllVar)
predictTreeAllVar = predict(treeAllVar, newData=test, method="class")
summary(predictTreeAllVar)
predictTreeAllVar = predict(treeAllVar, newData=test, type="class")
summary(predictTreeAllVar)
predictRForestTreeAllVar = predict(rForestTreeAllVar, newData=test, type="class")
summary(predictRForestTreeAllVar)
table(test$activity)
plot(svd1$u[,3],col=numericActivity,pch=19, ylab = "3rd U-Component of Training Set")
par(mfrow=c(1,2))
plot(svd1$u[,3],col=numericActivity,pch=19, ylab = "3rd U-Component of Training Set")
plot(treeAllVar)
text(treeAllVar, cex=0.5)
?text
text("abc", pos=1)
text(labels="abc", pos=1)
dev.copy2pdf(file="DA Ass2 Figure.pdf")
dev.copy2pdf(file="DA Ass2 Figure.pdf")
dev.copy2pdf(file="./DA Ass2 Figure.pdf")
dev.copy2pdf(file="DAAss2Figure.pdf")
save.image("C:\\R\\Data Analysis\\Assignment2\\history")
setwd("~/")
?qbeta
qbeta(0.75, 2,2)
qbeta(0.75, 1,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
X * Prob
x * Prob
x * prob
x * p
mean(x*p)
x * p / 4
sum(x*p)/4
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x*p)
qnorm(0.95, mean=12, sd=4)
qt(0.95, mean=12, sd=4)
qt(0.95, 100-1)
?qt
y <- c(140,138,150,148,135)
u <- c(132,135,151,146,130)
diff <- y-u
?t.test
t.test(diff)
qnorm(0.95, mean=1100, sd=30)
qnorm(0.025, mean=1100, sd=30)
?t
?qt
qt(0.025, df=8)
qt(0.975, df=8)
1100 + qt(0.025, df=8) *30
1100 + qt(0.975, df=8) * 30
qnorm(0.95, mean=30, sd=10)
qnorm(0.95, mean=30, sd=1)
qnorm(0.95, mean=12, sd=4/sqrt(100))
qnorm(0.95, mean=12, sd=4/10
)
qt(0.95, 15)
pbinom(3, size=4, prob=.5, lower.tail=FALSE)
pbinom(2, size=4, prob=.5, lower.tail=FALSE)
10*100/1787
ppois(56,100,lower.tail=FALSE)
ppois(.56,1,lower.tail=FALSE)
ppois(56,100)
ppois(55,100)
ppois(55,100,lower.tail=FALSE)
?ppois
ppois(56,100)
ppois(0.56,1)
?qnorm
qnorm(0.95, mean=0.01, sd=0.04/sqrt(100))
qnorm(0.95, mean=12, sd=4)
(7+10+6.5+6)/(8+11+9+12)
sessionInfo()
sessionInfo()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x*w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y-mean(y) ~ x-mean(x) - 1)
lm(I(y-mean(y)) ~ I(x-mean(x)) - 1)
library(datasets)
data(mtcars)
str(mtcars)
lm(mpg ~ wt, data=mtcars)
str(I)
define)I
define(I)
I?
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
I((x-mean(x))/sd(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(x)
sum(x*w)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y-mean(y)) ~ I(x-mean(x)) - 1)
lm(I(y-mean(y)) ~ I(x-mean(x)))
xc <- x - mean(x)
yc <- y - mean(y)
sum(yc * xc)/sum(xc ^ 2)
sum(y * x)/sum(x ^ 2)
install.packages("AppliedPredictiveModeling")
install.packages("pgmm")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
str(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
modFit <- train(training$Class ~ .,method="rpart",data=training)
modFit <- train(Class ~ .,method="rpart",data=training)
str(training)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training); dim(testing)
modFit <- train(Class ~ .,method="rpart",data=training)
install.packages("e1071")
modFit <- train(Class ~ .,method="rpart",data=training)
predict(modFit,newdata=data.frame(c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)))
predict(modFit,newdata=data.frame(segmentationOriginal = c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)))
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
predict(modFit,newdata=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
library(rattle)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t((TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)))
newdata = as.data.frame(t((23000, 10, 2)))
newdata = as.data.frame(t(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
newdata = as.data.frame(c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modFit,newdata=newdata
)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
library(randomForest)
library(gmb)
install.packages("gbm")
library(gbm)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test <- vowel.test
library(Hmisc)
train$y <- cut(train$y, g=10)
train$y <- cut2(train$y, g=10)
test$y <- cut2(test$y, g=10)
fitrf <- train(y ~ ., data=train, method="rf", prox=TRUE)
library(caret)
load("C:/R/Data Science - 8 - Practical Machine Learning/Course Project/.RData")
fitboost <- train(y ~ ., data=train, method="gbm", prox=TRUE)
library(caret)
library(rpart)
library(randomForest)
library(ipred)
library(plyr)
library(gbm)
fitboost <- train(y ~ ., data=train, method="gbm", prox=TRUE)
fitboost <- train(y ~ ., data=train, method="gbm")
head(names(test))
grep("y", names(test))
length(test$y)
fitboost <- train(classe ~ ., data=train, method="gbm", verbose=FALSE)
save.image("C:/R/Data Science - 8 - Practical Machine Learning/Course Project/.RData")
load("C:/R/Data Science - 8 - Practical Machine Learning/Course Project/.RData")
load("C:/R/Data Science - 8 - Practical Machine Learning/Course Project/.RData")
library(caret)
library(rpart)
library(randomForest)
library(ipred)
library(plyr)
sum(predict(fitrf, newdata=train) == train$classe)/length(train$classe)
class(test$classe)
length(predict(fitrf, newdata=train) == train$classe)
sum(predict(fitrpart, newdata=train) == train$classe)/length(train$classe)
sum(predict(fitboost, newdata=train) == train$classe)/length(train$classe)
head(predict(fitboost, newdata=train) == train$classe)
table(predict(fitboost, newdata=train), train$classe)
length(predict(fitboost, newdata=train))
length(predict(fitboost, newdata=test))
length(predict(fitrf, newdata=train))
length(predict(fitrpart, newdata=train))
length(train$classe)
0.2 * 19000
data(mtcars)
data(mtcars)
pairs
pairs(mtcars)
par(mfrow=c(2,3))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$cyl)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$disp)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$hp)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$drat)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$wt)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$qsec)))
plot(mtcars$am, resid(lm(mtcars$mpg ~ mtcars$am + mtcars$vs)))
setwd("C:/R/Data Sicence - 9 - Developing Data Products/Course Project/Shiny Application")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
